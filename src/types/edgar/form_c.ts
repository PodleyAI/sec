// Code generated by xgen. DO NOT EDIT.

import * as common from './common';

// SUBMISSION_TYPE is Enumerated values and descriptions: C: Offering Statement, C-W: Offering Statement
//                 Withdrawal, C-U: Progress Update, C-U-W: Progress Update Withdrawal, C/A: Amendment to Offering
//                 Statement, C/A-W: Amendment to Offering Statement Withdrawal, C-AR: Annual Report, C-AR-W: Annual Report
//                 Withdrawal, C-AR/A: Amendment to Annual Report, C-AR/A-W: Amendment to Annual Report Withdrawal, C-TR:
//                 Termination of Reporting, C-TR-W: Termination of Reporting Withdrawal
export enum SUBMISSION_TYPE {
  C = 'C',
  'C-W' = 'C-W',
  'C-U' = 'C-U',
  'C-U-W' = 'C-U-W',
  'C/A' = 'C/A',
  'C/A-W' = 'C/A-W',
  'C-AR' = 'C-AR',
  'C-AR-W' = 'C-AR-W',
  'C-AR/A' = 'C-AR/A',
  'C-AR/A-W' = 'C-AR/A-W',
  'C-TR' = 'C-TR',
  'C-TR-W' = 'C-TR-W',
}

// LEGAL_STATUS_FORM_TYPE ...
export enum LEGAL_STATUS_FORM_TYPE {
  Corporation = 'Corporation',
  'Limited Partnership' = 'Limited Partnership',
  'Limited Liability Company' = 'Limited Liability Company',
  'General Partnership' = 'General Partnership',
  'Business Trust' = 'Business Trust',
  Other = 'Other',
}

// SECURITY_OFFERED_TYPE ...
export enum SECURITY_OFFERED_TYPE {
  'Common Stock' = 'Common Stock',
  'Preferred Stock' = 'Preferred Stock',
  Debt = 'Debt',
  Other = 'Other',
}

// OVER_SUBSCRIPTION_ALLOCATION_TYPE ...
export enum OVER_SUBSCRIPTION_ALLOCATION_TYPE {
  'Pro-rata basis' = 'Pro-rata basis',
  'First-come, first-served basis' = 'First-come, first-served basis',
  Other = 'Other',
}

// COISSUER_FILER_TYPE ...
export enum COISSUER_FILER_TYPE {
  EdgarFiler = 'EdgarFiler',
}

// TypeScriptComplexType (TypeScript) FILER_CREDENTIALS_TYPE is These elements are part of the FILER_CREDENTIALS_TYPE group
export interface FILER_CREDENTIALS_TYPE {
  filerCik: string;
  filerCcc: common.CCC_TYPE;
}

// TypeScriptComplexType (TypeScript) LEGAL_STATUS_TYPE is These elements are part of the LEGAL_STATUS_TYPE group
export interface LEGAL_STATUS_TYPE {
  legalStatusForm: string;
  legalStatusOtherDesc: common.STRING_256_TYPE;
  jurisdictionOrganization: common.US_STATE_CODES_AND_TERRITORIES;
  dateIncorporation: common.DATE_TYPE;
}

// TypeScriptComplexType (TypeScript) FILER_TYPE is These elements are part of the FILER_TYPE group
export interface FILER_TYPE {
  filerCredentials: FILER_CREDENTIALS_TYPE;
  fileNumber: common.FILE_NUMBER_TYPE;
}

// TypeScriptComplexType (TypeScript) FLAGS_TYPE is These elements are part of the FLAGS_TYPE group
export interface FLAGS_TYPE {
  confirmingCopyFlag: common.TRUE_FALSE_TYPE;
  returnCopyFlag: common.TRUE_FALSE_TYPE;
  overrideInternetFlag: common.TRUE_FALSE_TYPE;
}

// TypeScriptComplexType (TypeScript) CONTACT_TYPE is These elements are part of the CONTACT_TYPE group
export interface CONTACT_TYPE {
  contactName: common.NAME_TYPE;
  contactPhone: common.PHONE_TYPE;
  contactEmail: common.INTERNET_ADDRESS_TYPE;
}

// TypeScriptComplexType (TypeScript) NOTIFICATIONS_TYPE is These elements are part of the NOTIFICATIONS_TYPE group
export interface NOTIFICATIONS_TYPE {
  notificationEmail: Array<common.INTERNET_ADDRESS_TYPE>;
}

// TypeScriptComplexType (TypeScript) ISSUER_INFO_TYPE is These elements are part of the ISSUER_INFO_TYPE group
export interface ISSUER_INFO_TYPE {
  nameOfIssuer: common.NAME_TYPE_150;
  legalStatus: LEGAL_STATUS_TYPE;
  issuerAddress: common.ADDRESS_TYPE;
  issuerWebsite: common.STRING_256_TYPE;
}

// TypeScriptComplexType (TypeScript) ISSUER_SIGNATURE_TYPE is These elements are part of the ISSUER_SIGNATURE_TYPE group
export interface ISSUER_SIGNATURE_TYPE {
  issuer: common.STRING_150_TYPE;
  issuerSignature: common.STRING_150_TYPE;
  issuerTitle: common.STRING_256_TYPE;
}

// TypeScriptComplexType (TypeScript) SIGNATURE_PERSON_TYPE is These elements are part of the SIGNATURE_PERSON_TYPE group
export interface SIGNATURE_PERSON_TYPE {
  personSignature: common.STRING_150_TYPE;
  personTitle: common.STRING_256_TYPE;
  signatureDate: common.DATE_TYPE;
}

// TypeScriptComplexType (TypeScript) ISSUER_INFORMATION_TYPE is These elements are part of the ISSUER_INFORMATION_TYPE group
export interface ISSUER_INFORMATION_TYPE {
  isAmendment: common.TRUE_FALSE_TYPE;
  progressUpdate: common.STRING_256_TYPE;
  natureOfAmendment: common.STRING_256_TYPE;
  issuerInfo: ISSUER_INFO_TYPE;
  isCoIssuer: common.YES_NO_TYPE;
  coIssuers: CO_ISSUERS_INFO_TYPE;
  companyName: common.STRING_150_TYPE;
  commissionCik: common.CIK_TYPE;
  commissionFileNumber: common.FILE_NUMBER_TYPE;
  crdNumber: common.CRD_NUMBER_TYPE;
}

// TypeScriptComplexType (TypeScript) FILER_INFO_TYPE is These elements are part of the FILER_INFO_TYPE group
export interface FILER_INFO_TYPE {
  filer: FILER_TYPE;
  period: common.DATE_TYPE;
  liveTestFlag: common.LIVE_TEST_TYPE;
  flags: FLAGS_TYPE;
  contact: CONTACT_TYPE;
  notifications: NOTIFICATIONS_TYPE;
}

// TypeScriptComplexType (TypeScript) OFFERING_INFORMATION_TYPE is These elements are part of the OFFERING_INFORMATION_TYPE group
export interface OFFERING_INFORMATION_TYPE {
  compensationAmount: common.STRING_256_TYPE;
  financialInterest: common.STRING_256_TYPE;
  securityOfferedType: string;
  securityOfferedOtherDesc: common.STRING_256_TYPE;
  noOfSecurityOffered: common.INTEGER_TYPE_10;
  price: common.DECIMAL_TYPE7_5_FIXED;
  priceDeterminationMethod: common.STRING_256_TYPE;
  offeringAmount: common.DECIMAL_TYPE7_2_FIXED;
  overSubscriptionAccepted: common.YES_NO_TYPE;
  overSubscriptionAllocationType: string;
  descOverSubscription: common.STRING_256_TYPE;
  maximumOfferingAmount: common.DECIMAL_TYPE7_2_FIXED;
  deadlineDate: common.DATE_TYPE;
}

// TypeScriptComplexType (TypeScript) ANNUAL_REPORT_DISCLOSURE_REQUIREMENTS_TYPE is These elements are part of the ANNUAL_REPORT_DISCLOSURE_REQUIREMENTS_TYPE group
export interface ANNUAL_REPORT_DISCLOSURE_REQUIREMENTS_TYPE {
  currentEmployees: common.DECIMAL_TYPE7_2_NONNEGATIVE;
  totalAssetMostRecentFiscalYear: common.DECIMAL_TYPE14_2_FIXED;
  totalAssetPriorFiscalYear: common.DECIMAL_TYPE14_2_FIXED;
  cashEquiMostRecentFiscalYear: common.DECIMAL_TYPE14_2_FIXED;
  cashEquiPriorFiscalYear: common.DECIMAL_TYPE14_2_FIXED;
  actReceivedMostRecentFiscalYear: common.DECIMAL_TYPE14_2_FIXED;
  actReceivedPriorFiscalYear: common.DECIMAL_TYPE14_2_FIXED;
  shortTermDebtMostRecentFiscalYear: common.DECIMAL_TYPE14_2_FIXED;
  shortTermDebtPriorFiscalYear: common.DECIMAL_TYPE14_2_FIXED;
  longTermDebtMostRecentFiscalYear: common.DECIMAL_TYPE14_2_FIXED;
  longTermDebtPriorFiscalYear: common.DECIMAL_TYPE14_2_FIXED;
  revenueMostRecentFiscalYear: common.DECIMAL_TYPE14_2_FIXED;
  revenuePriorFiscalYear: common.DECIMAL_TYPE14_2_FIXED;
  costGoodsSoldMostRecentFiscalYear: common.DECIMAL_TYPE14_2_FIXED;
  costGoodsSoldPriorFiscalYear: common.DECIMAL_TYPE14_2_FIXED;
  taxPaidMostRecentFiscalYear: common.DECIMAL_TYPE14_2_FIXED;
  taxPaidPriorFiscalYear: common.DECIMAL_TYPE14_2_FIXED;
  netIncomeMostRecentFiscalYear: common.DECIMAL_TYPE14_2_FIXED;
  netIncomePriorFiscalYear: common.DECIMAL_TYPE14_2_FIXED;
  issueJurisdictionSecuritiesOffering: string;
}

// TypeScriptComplexType (TypeScript) SIGNATURE_INFO_TYPE is These elements are part of the SIGNATURE_INFO_TYPE group
export interface SIGNATURE_INFO_TYPE {
  issuerSignature: ISSUER_SIGNATURE_TYPE;
  signaturePersons: SIGNATURE_PERSONS_TYPE;
}

// TypeScriptComplexType (TypeScript) SIGNATURE_PERSONS_TYPE ...
export interface SIGNATURE_PERSONS_TYPE {
  signaturePerson: Array<SIGNATURE_PERSON_TYPE>;
}

// TypeScriptComplexType (TypeScript) HEADER_DATA is These elements are part of the HEADER_DATA_TYPE group
export interface HEADER_DATA {
  submissionType: string;
  filerInfo: FILER_INFO_TYPE;
}

// TypeScriptComplexType (TypeScript) CO_ISSUERS_INFO_TYPE is These elements are part of the CO_ISSUERS_INFO_TYPE group
export interface CO_ISSUERS_INFO_TYPE {
  coIssuerInfo: Array<CO_ISSUER_INFO_TYPE>;
}

// TypeScriptComplexType (TypeScript) CO_ISSUER_INFO_TYPE is These elements are part of the CO_ISSUER_INFORMATION_TYPE group
export interface CO_ISSUER_INFO_TYPE {
  isEdgarFiler: string;
  coIssuerCik: common.CIK_TYPE;
  nameOfCoIssuer: common.NAME_TYPE_150;
  coIssuerLegalStatus: LEGAL_STATUS_TYPE;
  coIssuerAddress: common.ADDRESS_TYPE;
  coIssuerWebsite: common.STRING_256_TYPE;
}

// TypeScriptComplexType (TypeScript) FORM_DATA is These elements are part of the FORM_DATA_TYPE group
export interface FORM_DATA {
  issuerInformation: ISSUER_INFORMATION_TYPE;
  offeringInformation: OFFERING_INFORMATION_TYPE;
  annualReportDisclosureRequirements: ANNUAL_REPORT_DISCLOSURE_REQUIREMENTS_TYPE;
  signatureInfo: SIGNATURE_INFO_TYPE;
}

// TypeScriptComplexType (TypeScript) EdgarSubmission ...
export interface EdgarSchemaFormC {
  schemaVersion: common.SCHEMA_VERSION_TYPE;
  headerData: HEADER_DATA;
  formData: FORM_DATA;
  documents: common.EDGAR_DOCUMENTS_TYPE;
}

export interface EdgarSubmissionFormC {
  edgarSubmission: EdgarSchemaFormC;
}
