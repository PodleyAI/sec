// Code generated by xgen. DO NOT EDIT.

import * as common from './common';

// SUBMISSION_TYPE is Enumerated values and descriptions: 1-A: Offering Statement, 1-A/A: Pre-qualification amendment for offering statement, DOS: Confidential draft offering statement, DOS/A: Confidential draft pre-qualification amendment for offering statement, 1-A POS: Post-qualification amendment to offering statement
export enum SUBMISSION_TYPE {
  '1-A' = '1-A',
  '1-A/A' = '1-A/A',
  DOS = 'DOS',
  'DOS/A' = 'DOS/A',
  '1-A POS' = '1-A POS',
}

// DISCLOSE_TYPE ...
export enum DISCLOSE_TYPE {
  'Pro-rate basis' = 'Pro-rate basis',
  'First-come, first served basis' = 'First-come, first served basis',
  'Other' = 'Other',
}

// TIER_TYPE ...
export enum TIER_TYPE {
  'Tier1' = 'Tier1',
  'Tier2' = 'Tier2',
}

// SECURITIES_OFFERED_TYPE ...
export enum SECURITIES_OFFERED_TYPE {
  'Equity (common or preferred stock)' = 'Equity (common or preferred stock)',
  'Debt' = 'Debt',
  'Option, warrant or other right to acquire another security' = 'Option, warrant or other right to acquire another security',
  'Security to be acquired upon exercise of option, warrant or other right to acquire security' = 'Security to be acquired upon exercise of option, warrant or other right to acquire security',
  'Tenant-in-common securities' = 'Tenant-in-common securities',
  'Other(describe)' = 'Other(describe)',
}

// INDUSTRY_GROUP_TYPE ...
export enum INDUSTRY_GROUP_TYPE {
  Banking = 'Banking',
  Insurance = 'Insurance',
  Other = 'Other',
}

// STATEMENT_AUDIT_STATUS_TYPE ...
export enum STATEMENT_AUDIT_STATUS_TYPE {
  Unaudited = 'Unaudited',
  Audited = 'Audited',
}

// TypeScriptComplexType (TypeScript) ISSUER_CREDENTIALS_TYPE is These elements are part of the ISSUER_CREDENTIALS_TYPE group
export interface ISSUER_CREDENTIALS_TYPE {
  cik: string;
  ccc: common.CCC_TYPE;
}

// TypeScriptComplexType (TypeScript) CO_ISSUER_CREDENTIALS_TYPE is These elements are part of the CO_ISSUER_CREDENTIALS_TYPE group
export interface CO_ISSUER_CREDENTIALS_TYPE {
  cik: common.CIK_TYPE;
  ccc: common.CCC_TYPE;
}

// TypeScriptComplexType (TypeScript) FILER_TYPE is These elements are part of the FILER_TYPE group
export interface FILER_TYPE {
  issuerCredentials: ISSUER_CREDENTIALS_TYPE;
  dosFileNumber: common.FILE_NUMBER_TYPE;
  offeringFileNumber: common.FILE_NUMBER_TYPE;
}

// TypeScriptComplexType (TypeScript) FLAGS_TYPE is These elements are part of the FLAGS_TYPE group
export interface FLAGS_TYPE {
  returnCopyFlag: common.TRUE_FALSE_TYPE;
  overrideInternetFlag: common.TRUE_FALSE_TYPE;
  sinceLastFiling: common.TRUE_FALSE_TYPE;
}

// TypeScriptComplexType (TypeScript) CONTACT_TYPE is These elements are part of the CONTACT_TYPE group
export interface CONTACT_TYPE {
  contactName: common.NAME_TYPE;
  contactPhoneNumber: common.EDGAR_PHONE_TYPE;
  contactEmailAddress: common.INTERNET_ADDRESS_TYPE;
}

// TypeScriptComplexType (TypeScript) NOTIFICATIONS_TYPE is These elements are part of the NOTIFICATIONS_TYPE group
export interface NOTIFICATIONS_TYPE {
  notificationEmailAddress: Array<common.INTERNET_ADDRESS_TYPE>;
}

// TypeScriptComplexType (TypeScript) CO_FILER_TYPE is These elements are part of the CO_FILER_TYPE group
export interface CO_FILER_TYPE {
  coIssuerCredentials: CO_ISSUER_CREDENTIALS_TYPE;
  coIssuerFileNumber: common.FILE_NUMBER_TYPE_2;
}

// TypeScriptComplexType (TypeScript) FILER_INFO_TYPE is These elements are part of the FILER_INFO_TYPE group
export interface FILER_INFO_TYPE {
  liveTestFlag: common.LIVE_TEST_TYPE;
  filer: FILER_TYPE;
  flags: FLAGS_TYPE;
  contact: CONTACT_TYPE;
  notifications: NOTIFICATIONS_TYPE;
}

// TypeScriptComplexType (TypeScript) CO_ISSUER_INFO_TYPE is These elements are part of the CO_ISSUER_INFO_TYPE group
export interface CO_ISSUER_INFO_TYPE {
  'co-filer': Array<CO_FILER_TYPE>;
}

// TypeScriptComplexType (TypeScript) EMPLOYEES_INFO_TYPE is These elements are part of the EMPLOYEES_INFO_TYPE group
export interface EMPLOYEES_INFO_TYPE {
  issuerName: common.STRING_150_TYPE;
  jurisdictionOrganization: string;
  yearIncorporation: common.YEAR_TYPE;
  cik: common.CIK_TYPE;
  sicCode: number;
  irsNum: string;
  fullTimeEmployees: number;
  partTimeEmployees: number;
}

// TypeScriptComplexType (TypeScript) ISSUER_INFO_TYPE is These elements are part of the ISSUER_INFO_TYPE group
export interface ISSUER_INFO_TYPE {
  street1: common.STREET_TYPE;
  street2: common.STREET_TYPE;
  city: common.STRING_30_TYPE;
  stateOrCountry: string;
  zipCode: common.ZIP_TYPE;
  phoneNumber: common.PHONE_TYPE;
  connectionName: common.NAME_TYPE;
  connectionStreet1: common.STREET_TYPE;
  connectionStreet2: common.STREET_TYPE;
  connectionCity: common.STRING_30_TYPE;
  connectionStateOrCountry: string;
  connectionZipCode: common.ZIP_TYPE;
  connectionPhoneNumber: common.EDGAR_PHONE_TYPE;
  commentsEmailAddress: Array<common.INTERNET_ADDRESS_TYPE>;
  industryGroup: string;
  cashEquivalents: number;
  investmentSecurities: number;
  totalInvestments: number;
  accountsReceivable: number;
  loans: number;
  propertyPlantEquipment: number;
  propertyAndEquipment: number;
  totalAssets: number;
  accountsPayable: number;
  policyLiabilitiesAndAccruals: number;
  deposits: number;
  longTermDebt: number;
  totalLiabilities: number;
  totalStockholderEquity: number;
  totalLiabilitiesAndEquity: number;
  totalRevenues: number;
  totalInterestIncome: number;
  costAndExpensesApplToRevenues: number;
  totalInterestExpenses: number;
  depreciationAndAmortization: number;
  netIncome: number;
  earningsPerShareBasic: number;
  earningsPerShareDiluted: number;
  nameAuditor: common.STRING_150_TYPE;
}

// TypeScriptComplexType (TypeScript) COMMON_EQUITY_TYPE is These elements are part of the COMMON_EQUITY_TYPE group
export interface COMMON_EQUITY_TYPE {
  commonEquityClassName: common.STRING_30_TYPE;
  outstandingCommonEquity: number;
  commonCusipEquity: string;
  publiclyTradedCommonEquity: common.STRING_50_TYPE;
}

// TypeScriptComplexType (TypeScript) PREFERRED_EQUITY_TYPE is These elements are part of the PREFERRED_EQUITY_TYPE group
export interface PREFERRED_EQUITY_TYPE {
  preferredEquityClassName: common.STRING_30_TYPE;
  outstandingPreferredEquity: number;
  preferredCusipEquity: string;
  publiclyTradedPreferredEquity: common.STRING_50_TYPE;
}

// TypeScriptComplexType (TypeScript) DEBT_SECURITIES_TYPE is These elements are part of the DEBT_SECURITIES_TYPE group
export interface DEBT_SECURITIES_TYPE {
  debtSecuritiesClassName: common.STRING_30_TYPE;
  outstandingDebtSecurities: number;
  cusipDebtSecurities: string;
  publiclyTradedDebtSecurities: common.STRING_50_TYPE;
}

// TypeScriptComplexType (TypeScript) ISSUER_ELIGIBILITY_TYPE is These elements are part of the ISSUER_ELIGIBILITY_TYPE group
export interface ISSUER_ELIGIBILITY_TYPE {
  certifyIfTrue: common.TRUE_FALSE_TYPE;
}

// TypeScriptComplexType (TypeScript) APPLICATION_RULE262_TYPE is These elements are part of the APPLICATION_RULE262_TYPE group
export interface APPLICATION_RULE262_TYPE {
  certifyIfNotDisqualified: common.TRUE_FALSE_TYPE;
  certifyIfBadActor: common.TRUE_FALSE_TYPE;
}

// TypeScriptComplexType (TypeScript) SUMMARY_INFO_TYPE is These elements are part of the SUMMARY_INFO_TYPE group
export interface SUMMARY_INFO_TYPE {
  indicateTier1Tier2Offering: string;
  financialStatementAuditStatus: string;
  securitiesOfferedTypes: string;
  securitiesOfferedOtherDesc: common.STRING_255_TYPE;
  offerDelayedContinuousFlag: common.YES_NO_TYPE;
  offeringYearFlag: common.YES_NO_TYPE;
  offeringAfterQualifFlag: common.YES_NO_TYPE;
  offeringBestEffortsFlag: common.YES_NO_TYPE;
  solicitationProposedOfferingFlag: common.YES_NO_TYPE;
  resaleSecuritiesAffiliatesFlag: common.YES_NO_TYPE;
  securitiesOffered: number;
  outstandingSecurities: number;
  pricePerSecurity: number;
  issuerAggregateOffering: number;
  securityHolderAggegate: number;
  qualificationOfferingAggregate: number;
  concurrentOfferingAggregate: number;
  totalAggregateOffering: number;
  underwritersServiceProviderName: common.STRING_150_TYPE;
  underwritersFees: number;
  salesCommissionsServiceProviderName: common.STRING_150_TYPE;
  salesCommissionsServiceProviderFees: number;
  findersFeesServiceProviderName: common.STRING_150_TYPE;
  finderFeesFee: number;
  auditorServiceProviderName: common.STRING_150_TYPE;
  auditorFees: number;
  legalServiceProviderName: common.STRING_150_TYPE;
  legalFees: number;
  promotersServiceProviderName: common.STRING_150_TYPE;
  promotersFees: number;
  blueSkyServiceProviderName: common.STRING_150_TYPE;
  blueSkyFees: number;
  brokerDealerCrdNumber: common.CRD_NUMBER_TYPE;
  estimatedNetAmount: number;
  clarificationResponses: common.STRING_255_TYPE;
}

// TypeScriptComplexType (TypeScript) JURIDICTION_SECURITIES_OFFERED_TYPE is These elements are part of the JURIDICTION_SECURITIES_OFFERED_TYPE group
export interface JURIDICTION_SECURITIES_OFFERED_TYPE {
  jurisdictionsOfSecOfferedNone: common.TRUE_FALSE_TYPE;
  jurisdictionsOfSecOfferedSame: common.TRUE_FALSE_TYPE;
  issueJuridicationSecuritiesOffering: string;
  dealersJuridicationSecuritiesOffering: string;
}

// TypeScriptComplexType (TypeScript) UNREGISTERED_SECURITIES_TYPE is These elements are part of the UNREGISTERED_SECURITIES_TYPE group
export interface UNREGISTERED_SECURITIES_TYPE {
  ifUnregsiteredNone: common.TRUE_FALSE_TYPE;
}

// TypeScriptComplexType (TypeScript) SECURITIES_ISSUED_TYPE is These elements are part of the SECURITIES_ISSUED_TYPE group
export interface SECURITIES_ISSUED_TYPE {
  securitiesIssuerName: common.STRING_150_TYPE;
  securitiesIssuerTitle: common.STRING_255_TYPE;
  securitiesIssuedTotalAmount: number;
  securitiesPrincipalHolderAmount: number;
  securitiesIssuedAggregateAmount: string;
  aggregateConsiderationBasis: string;
}

// TypeScriptComplexType (TypeScript) UNREGISTERED_SECURITIES_ACT_TYPE is These elements are part of the UNREGISTERED_SECURITIES_ACT_TYPE group
export interface UNREGISTERED_SECURITIES_ACT_TYPE {
  securitiesActExcemption: common.STRING_255_TYPE;
}

// TypeScriptComplexType (TypeScript) HEADER_DATA is These elements are part of the HEADER_DATA_TYPE group
export interface HEADER_DATA {
  submissionType: string;
  filerInfo: FILER_INFO_TYPE;
  coIssuerInfo: CO_ISSUER_INFO_TYPE;
}

// TypeScriptComplexType (TypeScript) FORM_DATA is These elements are part of the FORM_DATA_TYPE group
export interface FORM_DATA {
  employeesInfo: Array<EMPLOYEES_INFO_TYPE>;
  issuerInfo: ISSUER_INFO_TYPE;
  commonEquity: Array<COMMON_EQUITY_TYPE>;
  preferredEquity: Array<PREFERRED_EQUITY_TYPE>;
  debtSecurities: Array<DEBT_SECURITIES_TYPE>;
  issuerEligibility: ISSUER_ELIGIBILITY_TYPE;
  applicationRule262: APPLICATION_RULE262_TYPE;
  summaryInfo: SUMMARY_INFO_TYPE;
  juridictionSecuritiesOffered: JURIDICTION_SECURITIES_OFFERED_TYPE;
  unregisteredSecurities: UNREGISTERED_SECURITIES_TYPE;
  securitiesIssued: Array<SECURITIES_ISSUED_TYPE>;
  unregisteredSecuritiesAct: UNREGISTERED_SECURITIES_ACT_TYPE;
}

// TypeScriptComplexType (TypeScript) EdgarSubmission ...
export interface EdgarSubmissionRegA1A {
  schemaVersion: common.SCHEMA_VERSION_TYPE;
  headerData: HEADER_DATA;
  formData: FORM_DATA;
  documents: common.EDGAR_DOCUMENTS_TYPE;
}
